#include <ros/ros.h>
#include <std_msgs/UInt16MultiArray>
#include <iostream>

//I2c Connection Libraries
#include <wiringPi.h>
#include <wiringPiI2C.h>

//Hex and CString conversion Libraries
#include <string>
#include <iomanip>
#include <sstream>

//Pull in UInt16 Var Type
#include <inttypes.h>

//Define Arduino Slave Address
#Define SLAVE_ADDRESS 0x04


//Create a CString Array to send
char data_stream[32];

void pwm_v_cb(const std_msgs::UInt16MultiArray& msg);

int main(int argc, char **argv)
{
    ros::init(argc, argv, "Microcontroller")
    ros::NodeHandle n;
    ros::Subscriber sub = n.subscribe("pwm_vals",1,pwm_v_cb);
    ros::spinOnce();

    return 0;

}


void pwm_v_cb(const std_msgs::UInt16MultiArray& msg)
{
    //Create array to copy
    unsigned int motor_v_copy[8];
 

    //Send all pwm values to copy array
    int i = 0;

    for(std::vector<int>::const_iterator it = array->data.begin(); it != array->data.end(); ++it)
    {
        //Convert individual integers to hex
        ss<<std::hex<<*it;
        //Append hex strings to the to the string
        pwm_v_string.Append(ss);
        //Add delimiters
        if(i<7)
        {
            //Use delimiter '-'
            pwm_v_string.Append("~");
        }
        if(i>=7){
            break;
        }
            
        i++;
    }

    std::string pwm_v_string;
    std::stringstream ss;

    
    //Convert the String to a string of chars
    data_stream=pwm_v_string.c_str;
    
    //Check for security
    if(pwm_v_string.length==31){    
        //Begin sending values over I2C stream
        for(int j=0;j<32;j++)
        {
            //write the value of that index to the Arduino
            wiringPiI2CWrite(SLAVE_ADDRESS, data_stream[j]);
        }
    }   






}
